@group(0) @binding(0) var<storage, read> input_img: array<u32>;
@group(0) @binding(1) var<storage, read_write> output_img: array<u32>;

fn gaussian_blur_kernel(x: i32, y: i32, width: i32, height: i32) -> vec4<f32> {
    let kernel: array<f32, 9> = array<f32, 9>(0.0625, 0.125, 0.0625,
                                              0.125,  0.25,  0.125,
                                              0.0625, 0.125, 0.0625);
    var sum: vec4<f32> = vec4<f32>(0.0);
    
    for (var i: i32 = -1; i <= 1; i++) {
        for (var j: i32 = -1; j <= 1; j++) {
            let ix = clamp(x + i, 0, width - 1);
            let iy = clamp(y + j, 0, height - 1);
            let index = iy * width + ix;
            let pixel = vec4<f32>(f32(input_img[index]) / 255.0);
            sum += pixel * kernel[(i+1) * 3 + (j+1)];
        }
    }
    return sum;
}

@compute @workgroup_size(16, 16)
fn gaussian_blur(@builtin(global_invocation_id) id: vec3<u32>) {
    let width = 512;
    let height = 512;
    let x = i32(id.x);
    let y = i32(id.y);
    let index = y * width + x;
    output_img[index] = u32(gaussian_blur_kernel(x, y, width, height) * 255.0);
}

// ---- Ray Tracing ----
fn intersect_sphere(ray_origin: vec3<f32>, ray_dir: vec3<f32>, sphere_center: vec3<f32>, radius: f32) -> bool {
    let oc = ray_origin - sphere_center;
    let a = dot(ray_dir, ray_dir);
    let b = 2.0 * dot(oc, ray_dir);
    let c = dot(oc, oc) - radius * radius;
    let discriminant = b * b - 4.0 * a * c;
    return discriminant > 0.0;
}

@compute @workgroup_size(16, 16)
fn ray_trace(@builtin(global_invocation_id) id: vec3<u32>) {
    let x = f32(id.x) / 512.0 * 2.0 - 1.0;
    let y = f32(id.y) / 512.0 * 2.0 - 1.0;
    
    let ray_origin = vec3<f32>(0.0, 0.0, -3.0);
    let ray_dir = normalize(vec3<f32>(x, y, 1.0));
    let sphere_center = vec3<f32>(0.0, 0.0, 0.0);
    
    let hit = intersect_sphere(ray_origin, ray_dir, sphere_center, 1.0);
    output_img[id.y * 512 + id.x] = select(0x000000FF, 0xFFFFFFFF, hit);
}
